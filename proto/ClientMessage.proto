syntax = "proto3";
import "DefineMessage.proto";
import "FrameDefineMessage.proto";
package KFMsg;

// 协议号区间 : 3000-10000
enum ClientProtocol
 {
	MSG_CLIENT_BEGIN 				= 0;	// pb3 需要0

	// match
	MSG_START_MATCH_REQ  			= 3001;	// 开始匹配 
	MSG_CANCEL_MATCH_REQ			= 3002;	// 取消匹配
	MSG_INFORM_MATCH_RESULT 		= 3003;	// 通知匹配结果
	MSG_AFFIRM_MATCH_REQ 			= 3004;	// 请求确认匹配
	MSG_INFORM_BATTLE_REQ			= 3005;	// 服务器通知战场信息
	MSG_INFORM_BATTLE_ACK			= 3006;	// 客户端确认战场信息
	MSG_FINISH_ROOM_REQ				= 3007;	// 服务器通知战场房间结束

	// hero
	MSG_REFRESH_RECRUIT_REQ			= 3102;	// 刷新招募英雄
	MSG_CHOOSE_DIVISOR_REQ			= 3103;	// 选择偏好因子
	MSG_REMOVE_DIVISOR_REQ			= 3104;	// 取消偏好因子
	MSG_RECRUIT_HERO_REQ			= 3105;	// 招募英雄
	MSG_HERO_TEAM_CHANGE_REQ		= 3106;	// 队伍改变请求(增加删除)
	MSG_HERO_TEAM_EXCHANGE_REQ  	= 3107; // 队伍角色互换请求
	MSG_LOCK_HERO_REQ				= 3108;	// 锁定英雄
	MSG_REMOVE_HERO_REQ				= 3109;	// 删除英雄
	MSG_SET_HERO_NAME_REQ			= 3110; // 设置英雄名字
	MSG_SET_RECRUIT_HERO_NAME_REQ 	= 3111; // 设置招募所英雄名字
	MSG_SET_HERO_ACTIVE_SKILL_REQ	= 3112; // 选择英雄主动技能
	MSG_ADD_TEAM_HP_REQ				= 3113;	// 增加队伍hp
	MSG_DEC_TEAM_HP_REQ				= 3114;	// 减少队伍hp
	MSG_CONTRACT_DATA_REQ			= 3115;	// 签约英雄数据请求
	MSG_CONTRACT_DATA_ACK			= 3116;	// 签约英雄数据返回
	MSG_CONTRACT_HERO_REQ			= 3117;	// 签约英雄请求
	MSG_RETIRE_HERO_REQ				= 3118;	// 退役英雄请求

	// train
	MSG_TRAIN_CHANGE_REQ			= 3200;	// 训练改变请求(增加删除)
	MSG_TRAIN_CLEAN_REQ				= 3201;	// 一键清空训练栏
	MSG_TRAIN_ONEKEY_REQ			= 3202;	// 一键完成训练栏
	MSG_TRAIN_AGAIN_REQ				= 3203;	// 再次训练请求
	MSG_TRAIN_FEE_REQ				= 3204;	// 训练费用请求
	MSG_TRAIN_FEE_ACK				= 3205;	// 训练费用响应
	MSG_TRAIN_FEE_ONE_KEY_REQ		= 3206;	// 一键完成训练费用请求
	MSG_TRAIN_FEE_ONE_KEY_ACK		= 3207;	// 一键完成训练费用响应

	// clinic
	MSG_CLINIC_CURE_REQ				= 3210;	// 治疗请求
	MSG_CLINIC_MEDICAL_FEE_REQ		= 3211;	// 治疗医药费请求
	MSG_CLINIC_MEDICAL_FEE_ACK		= 3212;	// 治疗医药费响应

	// granary
	MSG_GRANARY_GATHER_REQ			= 3215;	// 收获粮食
	MSG_GRANARY_GATHER_ACK			= 3216;	// 收获粮食返回
	MSG_GRANARY_BUY_REQ				= 3217;	// 购买粮食请求

	// smithy
	MSG_SMITHY_GATHER_REQ			= 3218;	// 收取铁匠铺材料
	MSG_SMITHY_MAKE_REQ				= 3219;	// 打造武器
	MSG_SMITHY_GATHER_ACK			= 3220;	// 收取铁匠铺材料返回

	// maincamp
	MSG_SET_BUILD_SKIN_REQ			= 3223;	// 设置建筑外观

	// build
	MSG_START_UPGRADE_BUILD_REQ		= 3230;	// 开始升级建筑
	MSG_ONEKEY_UPGRADE_BUILD_REQ	= 3231;	// 快速升级建筑
	MSG_UPGRADE_BUILD_REQ			= 3232;	// 升级建筑请求
	MSG_UPGRADE_TECHNOLOGY_REQ		= 3233;	// 升级科技请求


	// transfer
	MSG_TRANSFER_PRO_REQ			= 3250;	// 英雄转职请求
	MSG_SELECT_INNATE_REQ			= 3251;	// 选择天赋请求

	// realm
	MSG_REALM_ENTER_REQ				= 3301;	// 进入秘境地图请求
	MSG_REALM_ENTER_ACK				= 3302;	// 进入秘境地图回应
	MSG_PVE_REQ						= 3303;	// 战斗请求(生成npc)
	MSG_PVE_ACK						= 3304;	// 战斗回应	(生成npc)
	MSG_PVE_BALANCE_REQ				= 3305; // PVE战斗结算	
	MSG_REALM_EXIT_REQ				= 3306; // 退出秘境
	MSG_REALM_JUMP_REQ				= 3307;	// 跳转秘境地图请求
	MSG_UPDATE_FIGHTER_HERO_REQ		= 3308;	// 更新战斗数据
	MSG_REALM_EXTEND_REQ          	= 3309; // 进入秘境裂隙层
	MSG_PVE_BALANCE_ACK				= 3310;	// 战斗结算结果
	MSG_REALM_BALANCE_REQ			= 3311;	// 探索结算请求
	MSG_REALM_BALANCE_ACK			= 3312;	// 探索结算结果
	MSG_UPDATE_EXPLORE_PLAYER_REQ	= 3313;	// 更新探索玩家数据
	MSG_UPDATE_EXPLORE_NPC_REQ		= 3314;	// 更新探索npc数据
	MSG_UPDATE_EXPLORE_BUFF_ACK		= 3315;	// 更新探索buff数据
	MSG_EXPLORE_DROP_REQ			= 3316;	// 探索掉落请求
	MSG_KILL_NPC_REQ				= 3317;	// 击杀npc怪物
	MSG_UPDATE_FAITH_REQ			= 3318;	// 更新信仰请求
	MSG_INTERACT_ITEM_REQ			= 3319;	// 交互物件请求
	MSG_FIGHT_HERO_LIST_REQ			= 3320;	// 同步出战英雄列表
	MSG_REALM_TOWN_REQ				= 3321;	// 秘境回城
	MSG_PVE_FLEE_PUNISH_ACK			= 3322;	// 逃跑惩罚
	MSG_UPDATE_FAITH_ACK			= 3323;	// 更新信仰值
	MSG_GAMBLE_ITEM_SHOW_REQ		= 3324;	// 请求物品摇奖
	MSG_GAMBLE_ITEM_SHOW_ACK		= 3325; // 请求物品摇奖	
	MSG_GAMBLE_ITEM_START_REQ		= 3326;	// 开始物品摇奖
	MSG_GAMBLE_ITEM_FINISH_ACK		= 3327;	// 摇奖结束
	MSG_RUNE_EXCHANGE_START_REQ		= 3328;	// 符石交换
	MSG_RUNE_EXCHANGE_FINISH_ACK	= 3329;	// 符石交换
	MSG_DROP_SELECT_REQ				= 3330;	// 请求掉落选择
	MSG_DROP_SELECT_ACK				= 3331;	// 请求掉落选择
	MSG_SELECT_ITEM_REQ				= 3332;	// 选择掉落物品
	MSG_SELECT_ITEM_ACK				= 3333;	// 选择掉落物品
	MSG_MULTI_EVENT_REQ				= 3334;	// 多选项事件请求
	MSG_MULTI_EVENT_ACK				= 3335;	// 多选项事件请求
	MSG_ADD_TEAM_BUFF_REQ			= 3336;	// 添加队伍buff
	MSG_REMOVE_TEAM_BUFF_REQ		= 3337;	// 删除队伍buff
	MSG_NPC_GROUP_DATA_REQ			= 3338;	// 请求npc数据
	MSG_NPC_GROUP_DATA_ACK			= 3339;	// 请求npc数据
	MSG_LOGIC_EVENT_ACK				= 3340;	// 探索事件返回
	MSG_PVE_TURN_START_REQ			= 3341;	// pve战斗回合开始
	MSG_PVE_TURN_FINISH_REQ			= 3342;	// pve战斗回合结束
	MSG_UPDATE_TIME_ACK				= 3343;	// 更新探索时间
	MSG_UDPATE_WEATHER_ACK			= 3344;	// 更新探索天气
	MSG_UPDATE_TIME_REQ				= 3345; // 请求探索时间	
	MSG_UDPATE_WEATHER_REQ			= 3346;	// 请求新探索天气
	MSG_UPDATE_EXPLORE_EVENT_REQ	= 3347;	// 更新探索事件数据

	// daily
	MSG_QUERY_RECORD_REQ			= 3351;	// 查询记录
	MSG_QUERY_RECORD_ACK			= 3352;	// 记录返回
	
	// chapter
	MSG_CHAPTER_EXECUTE_STATUS_REQ	= 3371;	// 请求执行章节状态

	// stage
	MSG_UPDATE_MAIN_STAGE_REQ		= 3381;	// 更新主线流程
	
	// item
	MSG_HERO_WEAPON_REQ				= 3400;	// 给英雄装备武器
	MSG_HERO_UNWEAPON_REQ			= 3401;	// 给英雄脱武器
	MSG_UPDATE_DURABILITY_REQ		= 3402;	// 更新武器耐久
	MSG_HERO_WEAPON_ANOTHER_REQ		= 3403;	// 从影响身上装备武器到应该一个英雄身上
	MSG_MOVE_RUNE_REQ				= 3404;	// 移动符石
	MSG_RUNE_COMPOUND_ACK			= 3405;	// 符石合成返回
	MSG_GET_NEW_RUNE_ACK			= 3406;	// 获得新符石返回

	// story
	MSG_START_DIALOGUE_ACK 			= 3431;	// 开始对话返回
	MSG_UPDATE_DIALOGUE_REQ 		= 3432;	// 更新对话序列
	MSG_START_STORY_REQ				= 3433;	// 开始剧情请求
	MSG_UPDATE_STORY_REQ			= 3434;	// 更新剧情请求
	MSG_SELECT_DIALOGUE_BRANCH_REQ	= 3435;	// 选择对话分支
	MSG_ADD_STORY_ACK				= 3436;	// 添加剧情数据
	MSG_EXECUTE_STORY_REQ			= 3437;	// 执行故事请求

	// attribute-extra
	MSG_SET_PLAYER_HEADICON_REQ 	= 3451;	// 设置玩家头像
	MSG_SET_PLAYER_FACTION_REQ 		= 3452;	// 设置玩家势力

}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 开始匹配
// MSG_START_MATCH_REQ
message MsgStartMatchReq
{
	bytes version = 1;		// 客户端版本号
	uint32 matchid = 2;		// 匹配模式
	uint64 serverid = 3;	// 指定的battle服务器id
}

// 取消匹配
// MSG_CANCEL_MATCH_REQ
message MsgCancelMatchReq
{
	uint32 matchid = 1;		// 匹配模式
}

// 通知匹配成功
// MSG_INFORM_MATCH_RESULT
message MsgInformMatchResult
{
	uint32 time = 1;		// 等待确认时间( 单位: 秒 )
}

// 请求确认
// MSG_AFFIRM_MATCH_REQ
message MsgAffirmMatchReq
{
}

// 通知战场信息
// MSG_INFORM_BATTLE_REQ
message MsgInformBattleReq
{
	uint64 roomid = 1;			// 房间id
	uint64 battleid = 2;		// 战斗服务器id
	bytes ip = 3;				// ip
	uint32 port = 4;			// 端口
}

// 确认战场信息
// MSG_INFORM_BATTLE_ACK
message MsgInformBattleAck
{
}

// 房间结束
// MSG_FINISH_ROOM_REQ
message MsgFinishRoomReq
{
	uint64 roomid = 1;			// 房间id
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


// 刷新招募英雄
// MSG_REFRESH_RECRUIT_REQ
message MsgRefreshRecruitReq
{
	uint32 type = 1;	// 刷新类型(对应RecruitEnum), 不能使用免费刷新
} 

// 选择偏好因子
// MSG_CHOOSE_DIVISOR_REQ
message MsgChooseDivisorReq
{
	repeated uint32 id = 1;		// 偏好因子id数组
}

// 取消偏好因子
// MSG_REMOVE_DIVISOR_REQ
message MsgRemoveDivisorReq
{
	repeated uint32 id = 1;		// 偏好因子id数组
}

// 招募英雄
// MSG_RECRUIT_HERO_REQ
message MsgRecruitHeroReq
{
	uint64 uuid = 1;	// 英雄的uuid
}

// 队伍改变请求(增加删除)
// MSG_HERO_TEAM_CHANGE_REQ
message MsgHeroTeamChangeReq
{
	uint32 index = 1;	// 队伍的位置(索引从1开始)
	uint64 uuid = 2;	// 英雄的uuid(0就是取消)
}

// 队伍角色互换请求
// MSG_HERO_TEAM_EXCHANGE_REQ
message MsgHeroTeamExchangeReq
{
	uint32 oldindex = 1;	// 原来位置(索引从1开始)
	uint32 newindex = 2;	// 新的位置(索引从1开始)
}

// 锁定英雄
// MSG_LOCK_HERO_REQ
message MsgLockHeroReq
{
	uint64 uuid = 1;	// 英雄的uuid
	uint32 oper = 2;	// 操作类型(0：解锁 1：锁定英雄列表)
}

// 删除英雄
// MSG_REMOVE_HERO_REQ
message MsgRemoveHeroReq
{
	uint64 uuid = 1;	// 英雄的uuid
}

// 设置英雄名字
// MSG_SET_HERO_NAME_REQ
message MsgSetHeroNameReq
{
	uint64 uuid = 1;	// 英雄的uuid
	bytes name = 2;		// 名字
}

// 设置招募所英雄名字
// MSG_SET_RECRUIT_HERO_NAME_REQ
message MsgSetRecruitHeroNameReq
{
	uint64 uuid = 1;	// 英雄的uuid
	bytes name = 2;		// 名字
}

// 选择英雄主动技能
// MSG_SET_HERO_ACTIVE_SKILL_REQ
message MsgSetHeroActiveSkillReq
{
	uint64 uuid = 1;	// 英雄的uuid
	uint32 index = 2;	// 技能索引
}

// 训练改变请求(增加删除)
// MSG_TRAIN_CHANGE_REQ
message MsgTrainChangeReq
{
	uint32 index = 1;	// 训练栏的位置(索引从1开始)
	uint64 uuid = 2;	// 英雄的uuid(0就是取消)
}

// 一键清空训练栏
// MSG_TRAIN_CLEAN_REQ
message MsgTrainCleanReq
{
}

// 一键完成训练栏
// MSG_TRAIN_ONEKEY_REQ
message MsgTrainOnekeyReq
{
	uint32 index = 1;	// 训练栏的位置(索引从1开始)
}

// 再次训练请求
// MSG_TRAIN_AGAIN_REQ
message MsgTrainAgainReq
{
	uint32 index = 1;	// 训练栏的位置
}

//训练费用请求
//MSG_TRAIN_FEE_REQ
message MsgTrainFeeReq
{
}

// 一键完成训练费用请求
// MSG_TRAIN_FEE_ONE_KEY_REQ
message MsgTrainOneKeyFeeReq
{
	uint32 index = 1;	// 训练栏的位置(索引从1开始)
}

// 训练费用响应
// MSG_TRAIN_FEE_ACK
message MsgTrainFeeAck
{
	bytes element = 1;	// 消耗元数据
}

// 一键完成训练费用响应
// MSG_TRAIN_FEE_ONE_KEY_ACK
message MsgTrainOneKeyFeeAck
{
	uint32 index = 1;	// 训练栏的位置(索引从1开始)
	bytes element = 2;	// 消耗元数据
}

// 治疗请求
// MSG_CLINIC_CURE_REQ
message MsgClinicCureReq
{
	repeated uint64 uuid = 1;	// 英雄uuid列表
}

// 治疗医药费请求
// MSG_CLINIC_MEDICAL_FEE_REQ
message MsgClinicMedicalFeeReq
{
	repeated uint64 uuid = 1;	// 英雄uuid列表
}

// 治疗医药费响应
// MSG_CLINIC_MEDICAL_FEE_ACK
message MsgClinicMedicalFeeAck
{
	bytes element = 1;	// 消耗元数据
}

// 收获粮食
// MSG_GRANARY_GATHER_REQ
message MsgGranaryGatherReq
{
}

// 收获粮食返回
// MSG_GRANARY_GATHER_ACK
message MsgGranaryGatherAck
{
	uint32 crit = 1;	// 是否暴击
}

// 购买粮食
// MSG_GRANARY_BUY_REQ
message MsgGranaryBuyReq
{
}

// 收取铁匠铺材料
// MSG_SMITHY_GATHER_REQ
message MsgSmithyGatherReq
{
}

// 武器打造
// MSG_SMITHY_MAKE_REQ
message MsgSmithyMakeReq
{
	uint32 id = 1;		// 武器id
	uint32 num = 2;		// 打造数量
}

// 收取铁匠铺材料返回
// MSG_SMITHY_GATHER_ACK
message MsgSmithyGatherAck
{
	uint32 crit = 1;	// 是否暴击
}

////////////////////////////////////////////////////////////////////////////
// 进入秘境地图请求
// MSG_REALM_ENTER_REQ	
message MsgRealmEnterReq
{
	uint32 type = 1;		// 进入的类型 枚举RealmEnterEnum
	uint32 realmid = 2;		// 秘境id
}

// 跳转秘境地图请求
// MSG_REALM_JUMP_REQ	
message MsgRealmJumpReq
{
	uint32 level = 1;
	uint32 birthplace = 2;
}

// 进入秘境裂隙层请求
// MSG_REALM_EXTEND_REQ	
message MsgRealmExtendReq
{
	uint32 exploreid = 1;			// 探索的地图id
}

// 进入秘境地图回应
// MSG_REALM_ENTER_ACK	
message MsgRealmEnterAck
{
	PBExploreData exploredata = 1;			// 探索数据
	uint32 faith = 2;               		// 信仰值
	uint32 realmid = 3;						// 秘境id
    PBHeroBuffData buffdata = 4;    		// buff数据
	uint32 worldflag = 5;					// 里世界标记
	map<string, string> eventdata = 6;		// 事件数据
	uint32 foodstep = 7;					// 没有计算的粮食步数
	uint32 entertype = 8;					// 进入类型
}

// 退出秘境
// MSG_REALM_EXIT_REQ
message MsgRealmExitReq
{

}

// 探索回城
// MSG_REALM_TOWN_REQ
message MsgRealmTownReq
{

}

// 探索结算请求
// MSG_REALM_BALANCE_REQ
message MsgRealmBalanceReq
{
	uint32 result = 1;			// 战斗结果 1=成功 2=失败 3=逃跑
}

// 探索结算结果
// MSG_REALM_BALANCE_ACK
message MsgRealmBalanceAck
{
	uint32 result = 1;			// 战斗结果 1=成功 2=失败 3=逃跑
	PBBalanceData balance = 2;	// 结算结果
	uint32 level = 3;			// 当前层数
	uint32 maxlevel = 4;		// 最大层数
}

// 战斗请求(生成npc)
// MSG_PVE_REQ
message MsgPVEReq
{
	uint32 pveid = 1;		// 战斗id
	bytes npckey = 2;		// npckey
	bytes modulename = 3;	// 模块名
}

// 战斗回应	(生成npc)
// MSG_PVE_ACK
message MsgPVEAck
{
	uint32 pveid = 1;		// 战斗id
	uint32 spawnrule = 2;	// 出生规则
	uint32 faith = 3;		// 信仰值
	map< uint64, PBObject > hero = 4;	// 英雄列表
	map< uint64, PBObject > npc = 5;	// npc列表
	PBHeroBuffData buffdata = 6;		// buff数据
	uint32 fleerate = 7;				// 逃跑成功率
	uint32 worldflag = 8;				// 里世界标记
	uint32 npcgroupid = 9;				// npc groupid
	uint32 dungeonid = 10;				// 地形生成id
	uint32 realmid = 11;				// 秘境id
}

// 请求生成npc数据
// MSG_NPC_GROUP_DATA_REQ
message MsgNpcGroupDataReq
{
	bytes npckey = 1;
	repeated uint32 pveid = 2;		// pveid数组
}

// 请求生成npc数据
// MSG_NPC_GROUP_DATA_ACK
message MsgNpcGroupDataAck
{
	PBExploreNpcData npcdata = 1;		// npc显示数据
}

// 探索事件返回
// MSG_LOGIC_EVENT_ACK
message MsgLogicEventAck
{
	uint32 id = 1;			// 事件id
}

// 战斗结算请求
// MSG_PVE_BALANCE_REQ
message MsgPVEBalanceReq
{
	uint32 result = 1;				// 战斗结果 1=成功 2=失败
	uint32 truns = 2;				// 战斗回合数
}

// 战斗结算结果
// MSG_PVE_BALANCE_ACK
message MsgPVEBalanceAck
{
	uint32 result = 1;			// 战斗结果 1=成功 2=失败
	PBBalanceData balance = 2;	// 结算结果
	bytes modulename = 3;		// 模块名
	uint64 moduleid = 4;		// 模块id
	uint32 realmid = 5;			// 如果在秘境中
}

// 逃跑惩罚
// MSG_PVE_FLEE_PUNISH_ACK
message MsgPVEFleePunishAck
{
	bool success = 1;			// 是否逃跑成功
	repeated PBPunishData punishdata = 2;	// 惩罚数据
}

// 更新探索玩家数据
// MSG_UPDATE_EXPLORE_PLAYER_REQ
message MsgUpdateExplorePlayerReq
{
    PBExplorePlayerData playerdata = 1;
}

// 更新探索npc数据
// MSG_UPDATE_EXPLORE_NPC_REQ
message MsgUpdateExploreNpcReq
{
	PBExploreNpcData npcdata = 1;
}

// 更新探索buff数据
// MSG_UPDATE_EXPLORE_BUFF_ACK
message MsgUpdateExploreBuffAck
{
    PBHeroBuffData buffdata = 1;    // buff数据
}

// 更新探索事件数据
// MSG_UPDATE_EXPLORE_EVENT_REQ
message MsgUpdateExploreEventReq
{
    map<string, string> eventdata = 1;	// 事件数据
}

// 探索掉落请求
// MSG_EXPLORE_DROP_REQ
message MsgExploreDropReq
{
	repeated uint32 droplist = 1;		// 掉落id列表
}

// 杀死npc怪物
// MSG_KILL_NPC_REQ
message MsgKillNpcReq
{
	uint64 herouuid = 1;	// 英雄uuid( 击杀者 )
	uint64 npcuuid = 2;		// npcuuid( 被击杀者 )
}

// 更新信仰请求
// MSG_UPDATE_FAITH_REQ
message MsgUpdateFaithReq
{
	uint32 faith = 1;		// 信仰值
}

// 更新信仰请求
// MSG_UPDATE_FAITH_ACK
message MsgUpdateFaithAck
{
	uint32 faith = 1;		// 信仰值
	uint32 worldflag = 2;	// 里世界标记
}

// 交互物件请求
// MSG_INTERACT_ITEM_REQ
message MsgInteractItemReq
{
	uint32 itemid = 1;		// 物件id
	uint32 field = 2;		// 交互场所(1：探索 2:战斗)
}

// 同步出战英雄列表
// MSG_FIGHT_HERO_LIST_REQ
message MsgFightHeroListReq
{
	repeated uint64 herolist = 3;	// 出战英雄uuid列表
}

// 更新战斗数据
// MSG_UPDATE_FIGHTER_HERO_REQ
message MsgUpdateFighterHeroReq
{
	repeated PBFighterHeroData data = 1;	// 战斗数据
}
///////////////////////////////////////////////////////////
// 选择建筑外观
// MSG_SET_BUILD_SKIN_REQ
message MsgSetBuildSkinReq
{
	uint32 id = 1;				// 外观id
}


// 开始升级建筑
// MSG_START_UPGRADE_BUILD_REQ
message MsgStartUpgradeBuildReq
{
	uint32 id = 1;				// 建筑id
}

// 一键完成升级建筑
// MSG_ONEKEY_UPGRADE_BUILD_REQ
message MsgOnekeyUpgradeBuildReq
{
	uint32 id = 1;				// 建筑id
}

// 升级建筑请求
// MSG_UPGRADE_BUILD_REQ
message MsgUpgradeBuildReq
{
	uint32 id = 1;				// 建筑id
}

// 升级科技请求
// MSG_UPGRADE_TECHNOLOGY_REQ
message MsgUpgradeTechnologyReq
{
	uint32 id = 1;				// 科技id
}

// 英雄转职请求
// MSG_TRANSFER_PRO_REQ
message MsgTransferProReq
{
	uint64 uuid = 1;			// 英雄id
	uint32 profession = 2;		// 职业id
}

// 选择天赋请求
// MSG_SELECT_INNATE_REQ
message MsgSelectInnateReq
{
	uint64 uuid = 1;			// 英雄id
	repeated uint32 innate = 2;	// 删除天赋id列表
}

////////////////////////////////////////////////////
// 查询营地记录
// MSG_QUERY_RECORD_REQ
message MsgQueryRecordReq
{
	uint32 type = 1;		// 记录类型
	uint64 id = 2;			// id
}

// 记录返回
// MSG_QUERY_RECORD_ACK
message MsgQueryRecordAck
{
	uint32 type = 1;		// 记录类型
	uint64 id = 2;			// id
	repeated PBValues pbrecord = 3;	// 记录数据
}
////////////////////////////////////////////////////
// 请求执行章节状态
// MSG_CHAPTER_EXECUTE_STATUS_REQ
message MsgChapterExecuteStatusReq
{
	uint32 chapterid = 1;
}

// 更新主线流程
// MSG_UPDATE_MAIN_STAGE_REQ
message MsgUpdateMainStageReq
{
	uint32 stageid = 1;		// 流程id
}


////////////////////////////////////////////////////
// 给英雄装备武器
// MSG_HERO_WEAPON_REQ
message MsgHeroWeaponReq
{
	uint64 herouuid = 1;		// 英雄uuid
	uint64 itemuuid = 2;		// 武器uuid
}

// 脱装备
// MSG_HERO_UNWEAPON_REQ
message MsgHeroUnWeaponReq
{
	uint64 herouuid = 1;		// 英雄uuid
}

// 从英雄身上装备武器到另外一个英雄身上
// MSG_HERO_WEAPON_ANOTHER_REQ
message MsgHeroWeaponAnotherReq
{
	uint64 sourceherouuid = 1;		// 源英雄uuid
	uint64 targetherouuid = 2;		// 目标英雄uuid
}

// 更新武器耐久
// MSG_UPDATE_DURABILITY_REQ
message MsgUpdateDurabilityReq
{
	uint64 herouuid = 1;		// 英雄uuid
	uint32 operate = 2;			// 操作类型(1：增加 2：减少)
	uint32 durability = 3;		// 耐久值
}

// 移动符石
// MSG_MOVE_RUNE_REQ
message MsgMoveRuneReq
{
	bytes sourcename = 1;	// 源背包名字
	uint64 sourceuuid = 2;	// 道具uuid
	bytes targetname = 3;	// 目标背包名字
	uint32 targetindex = 4;	// 目标背包位置( 0 表示服务器自己找空位置 )
}

// 符石合成返回
// MSG_RUNE_COMPOUND_ACK
message MsgRuneCompoundAck
{
	map<uint32, uint32> compoundlist = 1;	// 合成符石列表<id num>
}

// 获得新符石返回
// MSG_GET_NEW_RUNE_ACK
message MsgGetNewRuneAck
{
	map<uint32, uint32> runelist = 1;	// 获得新符石列表<id ->
}


// 开始对话返回
// MSG_START_DIALOGUE_ACK
message MsgStartDialogueAck
{
	uint32 dialogid = 1;		// 对话id
	uint32 sequenceid = 2;		// 序列id
	uint32 type = 3;			// 对话类型(7:UI对话 8:气泡对话)
	uint32 storyid = 4;			// 剧情id
}

// 更新对话序列
// MSG_UPDATE_DIALOGUE_REQ
message MsgUpdateDialogueReq
{
	uint32 dialogueid = 1;		// 对话id
	uint32 flag = 2;			// 跳转标记(0:分支序列 1:初始序列)
}

// 更新剧情请求
// MSG_UPDATE_STORY_REQ
message MsgUpdateStoryReq
{
	uint32 storyid = 1;			// 剧情id
	uint32 sequence = 2;		// 增加序列
}

// 开始剧情请求
// MSG_START_STORY_REQ
message MsgStartStoryReq
{
	uint32 storyid = 1;			// 剧情id
	uint32 childid = 2;			// 子剧情id
}

// 选择对话分支
// MSG_SELECT_DIALOGUE_BRANCH_REQ
message MsgSelectDialogueBranchReq
{
	uint32 dialogueid = 1;		// 对话id
	uint32 branchid = 2;		// 分支id
}

// 添加剧情数据
// MSG_ADD_STORY_ACK
message MsgAddStoryAck
{
	uint32 storyid = 1;			// 剧情id
	uint64 moduleid = 2;		// 模块id
	bytes modulename = 3;		// 模块名
}

// 开始执行故事请求
// MSG_EXECUTE_STORY_REQ
message MsgExecuteStoryReq
{
}


// 设置玩家头像
// MSG_SET_PLAYER_HEADICON_REQ
message MsgSetPlayerHeadIconReq
{
	uint32 iconid = 1;
}

// 设置玩家势力
// MSG_SET_PLAYER_FACTION_REQ
message MsgSetPlayerFactionReq
{
	uint32 factionid = 1;
}

// 请求物品摇奖
// MSG_GAMBLE_ITEM_SHOW_REQ
message MsgGambleItemShowReq
{
	uint32 gambleid = 1;	// 摇奖配置id
}

// 请求物品摇奖
// MSG_GAMBLE_ITEM_SHOW_ACK
message MsgGambleItemShowAck
{
	uint32 gambleid = 1;		// 摇奖配置id
	uint32 gamblecount = 2;		// 第几次摇奖
	uint32 costitemid = 3;		// 花费道具id
	uint32 costitemcount = 4; 	// 花费道具数量
}

// 开始摇奖请求
// MSG_GAMBLE_ITEM_START_REQ
message MsgGambleItemStartReq
{
	uint32 gambleid = 1;		// 摇奖配置id
}

// 摇奖结束
// MSG_GAMBLE_ITEM_FINISH_ACK
message MsgGambleItemFinishAck
{
	uint32 gambleid = 1;			// 摇奖配置id
	uint32 gamblecount = 2;			// 摇奖次数
	uint32 costitemid = 3;			// 花费道具id
	uint32 costitemcount = 4; 		// 花费道具数量
	map<uint32, uint32> showitemid = 5;	// 显示的道具列表(数组)
	uint32 showindex = 6;			// 最终获得的道具索引
}

// 符石交换
// MSG_RUNE_EXCHANGE_START_REQ
message MsgRuneExchangeStartReq
{
	uint32 exchangeid = 1;	// 交换id
	bytes itemname = 2;		// 背包名
	uint64 itemuuid= 3;		// 道具uuid
}

// 符石交换
// MSG_RUNE_EXCHANGE_FINISH_ACK
message MsgRuneExchangeFinishAck
{
	uint32 exchangeid = 1;	// 交换id
}

// 请求掉落选择
// MSG_DROP_SELECT_REQ
message MsgDropSelectReq
{
	uint32 selectid = 1;	// 选择配置id
}

// 请求掉落选择
// MSG_DROP_SELECT_ACK
message MsgDropSelectAck
{
	uint32 selectid = 1;	// 选择配置id
    uint32 selectcount = 2; // 选择数量
}

// 选择掉落武器
// MSG_SELECT_ITEM_REQ
message MsgSelectItemReq
{
	repeated uint64 itemuuid = 1;	// 选择的道具uuid
}

// 选择掉落武器
// MSG_SELECT_ITEM_ACK
message MsgSelectItemAck
{

}

// 多选项事件请求
// MSG_MULTI_EVENT_REQ
message MsgMultiEventReq
{
	uint32 multieventid = 1;	// 配置id
	uint32 index = 2;			// 第几项
}

// 多选项事件请求
// MSG_MULTI_EVENT_ACK
message MsgMultiEventAck
{
	uint32 multieventid = 1;	// 配置id
	uint32 eventid = 2;			// 执行的事件id
}

// 添加buff
// MSG_ADD_TEAM_BUFF_REQ
message MsgAddTeamBuffReq
{
	map<uint32, uint32> bufflist = 1;
}

// 删除buff
// MSG_REMOVE_TEAM_BUFF_REQ
message MsgRemoveTeamBuffReq
{
	map<uint32, uint32> bufflist = 1;
}

// 添加hp
// MSG_ADD_TEAM_HP_REQ
message MsgAddTeamHpReq
{
	uint32 hpvalue = 1;		// 具体数值
	uint32 hppecent = 2;	// 万分比
	map<string, uint64> conditions = 3;	// 限制条件 如性别(sex, 1), 种族(race, 1111)
}

// 减少hp
// MSG_DEC_TEAM_HP_REQ
message MsgDecTeamHpReq
{
	uint32 hpvalue = 1;		// 具体数值
	uint32 hppecent = 2;	// 万分比
	map<string, uint64> conditions = 3;	// 限制条件 
}

// 签约英雄数据请求
// MSG_CONTRACT_DATA_REQ
message MsgContractDataReq
{
	uint64 uuid = 1;	// 英雄uuid
}

// 签约英雄数据返回
// MSG_CONTRACT_DATA_ACK
message MsgContractDataAck
{
	uint64 uuid = 1;		// 英雄uuid
	uint32 durability = 2;	// 续签年限
	bytes cost = 3;			// 续签费用
}

// 签约英雄请求
// MSG_CONTRACT_HERO_REQ
message MsgContractHeroReq
{
	uint64 uuid = 1;	// 英雄uuid
}

// 退役英雄请求
// MSG_RETIRE_HERO_REQ
message MsgRetireHeroReq
{
	uint64 uuid = 1;	// 英雄uuid
}

// PVE战斗回合开始
// MSG_PVE_TURN_START_REQ
message MsgPVETurnStartReq
{
	uint32 turn = 1;	// 当前第几回合开始
}

// PVE战斗回合结束
// MSG_PVE_TURN_FINISH_REQ
message MsgPVETurnFinsihReq
{
	uint32 turn = 1;	// 当前第几回合结束
}

// 更新时间
// MSG_UPDATE_TIME_REQ
message MsgUpdateTimeReq
{
}

// 更新时间
// MSG_UPDATE_TIME_ACK
message MsgUpdateTimeAck
{
	uint32 timetype = 1;		// 时间类型
	uint32 realmduration = 2;	// 秘境持续时间, 不需要可以无视( 在探索中是移动步数, 在战斗中是回合数 )
	uint32 pveduration = 3;		// pve持续时间, 不需要可以无视( 在探索中是移动步数, 在战斗中是回合数 )
}

// 更新天气
// MSG_UDPATE_WEATHER_REQ
message MsgUpdateWeatherReq
{

}

// 更新天气
// MSG_UDPATE_WEATHER_ACK
message MsgUpdateWeatherAck
{
	uint32 weahterid = 1;				// 天气id
	uint32 nextweahterid = 2;			// 下个天气id( 0表示没有 )
	uint32 realmtotalduration = 3;		// 秘境总持续时间, 不需要可以无视( 在探索中是移动步数, 在战斗中是回合数 )
	uint32 realmcurrentduration = 4;	// 秘境当前持续时间
	uint32 pvetotalduration = 5;		// pve总持续时间, 不需要可以无视( 在探索中是移动步数, 在战斗中是回合数 )
	uint32 pvecurrentduration = 6;		// pve当前持续时间( 0表是没有 )
}